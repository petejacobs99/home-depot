const request = require('supertest')
const mongoose = require('mongoose')
const { MongoMemoryServer } = require('mongodb-memory-server')
const app = require('../app-server')
const server = app.listen(8030, () => console.log(`8030 ITEM TEST`))
const Item = require('../models/item')
const SubItem = require('../models/subItem')
const Category = require('../models/category')
const Department = require('../models/department')
let mongoServer

beforeAll(async () => {
    mongoServer = await MongoMemoryServer.create()
    await mongoose.connect(mongoServer.getUri())
})

afterAll(async () => {
    await mongoose.connection.close()
    mongoServer.stop()
    server.close()
})

describe('Test the item endpoints', () => {
    test('It should display an item', async () => {
        const subItem = new SubItem({ color: 'test', price: 100 })
        await subItem.save()
        const item = new Item({ name: 'test', description: 'test', subItems: [subItem]})
        await item.save()
        const response = await request(app)
            .get(`api/items/${item._id}`)
    expect(response.body.name).toEqual('test')
    expect(response.body.description).toEqual(`test`)
    expect(response.body.subItems).toContain(subItem)
    })
    test('It should search for an item', async () => {
        const subItem = new SubItem({ color: 'test', price: 100 })
        await subItem.save()
        const item = new Item({ name: 'test', description: 'test', subItems: [subItem], searchTerm: ['test']})
        await item.save()
        const response = await request(app)
            .get(`api/items/search/test`)
        expect(response.statusCode).toBe(200)
        expect.objectContaining(item)
    })
    test('It should display all items', async() => {
        const subItem1 = new SubItem({ color: 'test', price: 100 })
        await subItem1.save()
        const item1 = new Item({ name: 'test', description: 'test', subItems: [subItem1]})
        await item1.save()
        const subItem2 = new SubItem({ color: 'test', price: 100 })
        await subItem2.save()
        const item2 = new Item({ name: 'test', description: 'test', subItems: [subItem2]})
        await item2.save()
        const response = await request(app)
            .get('/api/items/')
        expect(response.statusCode).toBe(200)
        expect.objectContaining(item1)
        expect.objectContaining(item2)
    })
    test('It should display all featured items', async() => {
        const subItem1 = new SubItem({ color: 'test', price: 100 })
        await subItem1.save()
        const item1 = new Item({ name: 'test', description: 'test', subItems: [subItem1], featured: true})
        await item1.save()
        const subItem2 = new SubItem({ color: 'test', price: 100 })
        await subItem2.save()
        const item2 = new Item({ name: 'test', description: 'test', subItems: [subItem2], featured: true})
        await item2.save()
        const response = await request(app)
            .get(`/api/items/featured`)
        expect(response.statusCode).toBe(200)
        expect.objectContaining(item1)
        expect.objectContaining(item2)
    })
    test('It should display all items in a category', async() => {
        const department = new Department({name: 'hardware'})
        await department.save()
        const category = new Category({name: 'drills', department: department._id})
        await category.save()
        const subItem1 = new SubItem({ color: 'test', price: 100 })
        await subItem1.save()
        const item1 = new Item({ name: 'test', description: 'test', subItems: [subItem1], category: category._id})
        await item1.save()
        const subItem2 = new SubItem({ color: 'test', price: 100 })
        await subItem2.save()
        const item2 = new Item({ name: 'test', description: 'test', subItems: [subItem2], category: category._id})
        await item2.save()
        const response = await request(app)
            .get(`/api/items/category/${category._id}`)
        expect(response.statusCode).toBe(200)
        expect.objectContaining(item1)
        expect.objectContaining(item2)
    })
})