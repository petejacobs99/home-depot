const request = require('supertest')
const mongoose = require('mongoose')
const { MongoMemoryServer } = require('mongodb-memory-server')
const app = require('../app-server')
const server = app.listen(8060, () => console.log(`8060 USER TEST`))
const User = require('../models/user')
let mongoServer

beforeAll(async () => {
    mongoServer = await MongoMemoryServer.create()
    await mongoose.connect(mongoServer.getUri())
})

afterAll(async () => {
    await mongoose.connection.close()
    mongoServer.stop()
    server.close()
})

describe('Test the user endpoints', () => {
    test('It should create a guest user', async () => {
        const response = await request(app)
        .post('/api/users/guest')
    expect(response.statusCode).toBe(200)
    expect(response.body.user.name).toEqual('Guest')
    expect(response.body).toHaveProperty('token')
    })
    test('It should create a new user', async () => {
        const response = await request(app)
        .post('/api/users')
        .send({ name: 'test', email: 'test1@email.com', password: 'test' })
    expect(response.statusCode).toBe(200)
    expect(response.body.user.name).toEqual('test')
    expect(response.body.user.email).toEqual('test.com')
    expect(response.body).toHaveProperty('token')
    })
    test('It should log in a user', async () => {
        const user = new User({ name: 'test', email: 'test2@email.com', password: 'test' })
        await user.save()
        const response = await request(app)
            .post('/api/users/login')
            .send({ email: 'test2@email.com', password: 'test' })
        expect(response.statusCode).toBe(200)
        expect(response.body.user.name).toEqual('test')
        expect(response.body.user.email).toEqual('test2@email.com')
        expect(response.body.user.loggedIn).toEqual(true)
        expect(response.body).toHaveProperty('token')
    })
    test('It should update a user', async () => {
        const user = new User({ name: 'test', email: 'test3@email.com', password: 'test' })
        await user.save()
        const token = await user.generateAuthToken()
        const response = await request(app)
            .put(`/users/${user._id}`)
            .set(`Authorization`, `Bearer ${token}`)
            .send({ name: `test4`, email: `test4@email.com` })
        expect(response.statusCode).toBe(200)
        expect(response.body.name).toEqual(`test4`)
        expect(response.body.email).toEqual(`test4@email.com`)
    })
    test('It should check the user token', async () => {
        const user = new User({ name: 'test', email: 'test5@email.com', password: 'test'})
        await user.save()
        const token = await user.generateAuthToken()
        const response = await request(app)
            .get(`/api/users/check-token`)
            .set(`Authorization`, `Bearer ${token}`)
        expect(response.statusCode).toBe(200)
        expect(response.body.user).toBe(user)
    })
})